# -*- coding: utf-8 -*-
"""
Created on Sun Aug 14 15:30:40 2022

@author: T pro
"""

# -*- coding: utf-8 -*-
"""
Created on Thu Aug 11 15:09:08 2022

@author: T pro
"""
import msgspec
from msgspec.json import decode
from msgspec import Struct
from typing import Set
import os
import json
import time


file = r"C:\Users\T pro\Desktop\MalwareScript\jsonfiles"
for filename in os.scandir(file):
    if filename.is_file():
        print(filename.path)

start1 = time.time()
data_vector = []
for filename in os.scandir(file):
    if filename.is_file():
        f = open(filename)
        data = json.load(f)
        data_vector.append(data)
        
def api_fin(dictionary, feature):
  counter = 0
  for element in dictionary['behavior']['processes']:
    for process in element['calls']:
      if (process['api'] == feature):
        counter += 1
  return counter        
cou = api_fin(data, "NtDelayExecution")

end1 = time.time()
dif1 = end1 - start1



# =============================================================================
# 
# #-----TCP-------
# 
# class TCP(Struct):
#     tcp: list
# 
# class NetworkTCP(Struct):
#     network: TCP
# 
# #--------UDP--------
# class UDP(Struct):
#     udp: list
# class NetworkUdp(Struct):
#     network: UDP
#     
# #----------ICMP---------
# class ICMP(Struct):
#     icmp: list
# class NetworkICMP(Struct):
#     network: ICMP
# 
# #-----------DROPPED_FILES----------
# 
# class DROPPED(Struct):
#     dropped: list
#     
# #----------NUM_SECTIONS-----------
# 
# class SECTIONS(Struct):
#     sections: list
# class PE(Struct):
#     pe: SECTIONS
# class STATIC(Struct):
#     static: PE
# =============================================================================
# =============================================================================
# with open(r"C:/Users/T pro/Desktop/ffe7f8921b0d42d3014c972c33460ec0f6565e4ce0bb8bd04df4a6d635c7903d.json", "r") as f:
#      data = f.read()
#      byte_data = (bytes(data, 'utf-8'))
#      jsnudp = msgspec.json.decode(byte_data, type=NetworkTCP)
# =============================================================================

#--------------- N E T W O R K ---------------------------

class Network(Struct):
    network: dict
    
def net(dictionary, feature):
    try:
        with open(dictionary, "r") as f:
             data = f.read()
             byte_data = (bytes(data, 'utf-8'))
             jsn = msgspec.json.decode(byte_data, type=Network)
             for key in jsn.network:
                 if key == feature:
                     return len(jsn.network[feature])
    except:
        return 0

network_names = ["icmp", "tcp", "udp", "http"]

     
def network_calls(dictionary):
    net_vector = []
    for name in network_names:
        net_vector.append(net(dictionary, name))
    return net_vector
        
#network_full = network_calls(r"C:/Users/T pro/Desktop/ffe7f8921b0d42d3014c972c33460ec0f6565e4ce0bb8bd04df4a6d635c7903d.json")

#--------------------------S T A T I C -------------------------
class PE(Struct):
    pe: dict
class Static(Struct):
    static: PE

def stat_pe(dictionary, feature):
    with open(dictionary, "r") as f:
         data = f.read()
         byte_data = (bytes(data, 'utf-8'))
         try: 
             jsn = msgspec.json.decode(byte_data, type=Static)
             for key in jsn.static.pe:
                 if key == feature:
                     return len(jsn.static.pe[feature])
         except:
            return 0

static_names = ["sections", "exports", "resources"]

def static_calls(dictionary):
    static_vector = []
    for name in static_names:
        static_vector.append(stat_pe(dictionary, name))
    return static_vector

#static_full = static_calls(r"C:/Users/T pro/Desktop/ffe7f8921b0d42d3014c972c33460ec0f6565e4ce0bb8bd04df4a6d635c7903d.json")


#------------------------------ B E H A V I O U R -----------------
class Behavior(Struct):
    behavior: dict
def behav_calls(dictionary):
    with open(dictionary, "r") as f:
         data = f.read()
         byte_data = (bytes(data, 'utf-8'))
         try: 
             jsn = msgspec.json.decode(byte_data, type=Behavior)
             return len(jsn.behavior["processes"])
         except:
            return 0

#behavior_full = behav_calls(r"C:/Users/T pro/Desktop/ffe7f8921b0d42d3014c972c33460ec0f6565e4ce0bb8bd04df4a6d635c7903d.json")

#------------------------- D R O P P E D -------------------------
class Dropped(Struct):
    dropped: dict
def dropped_calls(dictionary):
    with open(dictionary, "r") as f:
         data = f.read()
         byte_data = (bytes(data, 'utf-8'))
         try: 
             jsn = msgspec.json.decode(byte_data, type=Dropped)
             return len(jsn.behavior)
         except:
            return 0

#dropped_full = dropped_calls(r"C:/Users/T pro/Desktop/ffe7f8921b0d42d3014c972c33460ec0f6565e4ce0bb8bd04df4a6d635c7903d.json")

#-------------------------- R E G I S T R Y  K E Y S ----------------------

class Enhanced(Struct):
    enhanced: list
class BehaviorReg(Struct):
    behavior: Enhanced
    
def registry_finder(dictionary, feature):
    counter = 0
    with open(dictionary, "r") as f:
         data = f.read()
         byte_data = (bytes(data, 'utf-8'))
         jsn = msgspec.json.decode(byte_data, type=BehaviorReg)
         while counter < len(jsn.behavior.enhanced):
             if jsn.behavior.enhanced[counter]['object'] == "registry":
                 if feature in jsn.behavior.enhanced[counter]["data"]["regkey"]:
                     return 1
             counter += 1
    return 0

reg_names = ["Cryptography", "IEData", "Tcpip", "Dnscache", "DockingState", "CustomLocale", "SafeBoot", "Nls\\Sorting", "SystemInformation", "Persistence" ]
         
def registry_calls(dictionary):
    reg_vector = []
    for name in reg_names:
        reg_vector.append(registry_finder(dictionary, name))
    return reg_vector
#registry_full = registry_calls(r"C:/Users/T pro/Desktop/ffe7f8921b0d42d3014c972c33460ec0f6565e4ce0bb8bd04df4a6d635c7903d.json")
    
    
    
    
    
    
    
    


# ----------------------- DEFINITION API CALLS--------------------
class Processes(Struct):
    processes: list

class Behavior(Struct):
    behavior: Processes
    

api_names = ["NtDelayExecution", "NtCreateFile", "NtFreeVirtualMemory", "HttpOpenRequestA", "NtOpenFile", "Socket", "CryptDecodeObjectEx", "OpenSCManagerA", "CryptGenKey", "CryptAcquireContextA", "NtAllocateVirtualMemory", "bind", "closesocket", "NtCreateMutant", "DeviceIoControl", "GetSystemTimeAsFileTime", "HttpSendRequestA", "NtMapViewOfSection", "NtOpenMutant", "NtProtectVirtualMemory", "NtWriteFile", "CreateToolhelp32Snapshot", "CreateRemoteThread", "NtDuplicateObject", "NtQueryInformationFile", "InternetReadFile", "CryptCreateHash", "CryptHashData", "CheckCursorPos", "CryptExportKey"]


    
    
def api_calls(dictionary, feature):
    counter = 0
    with open(dictionary, "r") as f:
         data = f.read()
         byte_data = (bytes(data, 'utf-8'))
         calls = msgspec.json.decode(byte_data, type=Behavior)
         for call in calls.behavior.processes:
             for c in call['calls']:
                 if c['api'] == feature:
                     counter += 1
    return counter

def api_vector(dictionary):
    api_vec = []
    for name in api_names:
        api_vec.append(api_calls(dictionary, name))
    return api_vec

# ----------------------------------------------------------------------------#
# ----------------------------------------------------------------------------#






#api_full = (api_vector(r"C:/Users/T pro/Desktop/ffe7f8921b0d42d3014c972c33460ec0f6565e4ce0bb8bd04df4a6d635c7903d.json"))
    
    
# =============================================================================
# msg = msgspec.json.encode(data1)
# =============================================================================


#------------------------------------- A L L   V E C T O R S --------------------------
# =============================================================================
# full_vector = network_full + static_full +  registry_full + api_full
# full_vector.append(behavior_full)
# full_vector.append(dropped_full)
# =============================================================================

file = "ffec524569ff768b732e851329bbc027e0e285815586d0c4766c5826c30234c5.json"
end = time.time()



user_to_repos = {}
# =============================================================================
# for record in data:
#     user = record.behavior.login
#     repo = record.repo.name
#     if user not in user_to_repos:
#         user_to_repos[user] = set()
#     user_to_repos[user].add(repo)
# print(len(user_to_repos), "records")
# =============================================================================


start = time.time()

def vector_file(dictionary):
    file_vector = []
    file_vector = (network_calls(dictionary)) + (static_calls(dictionary)) + (registry_calls(dictionary)) + (api_vector(dictionary))
    file_vector.append(behav_calls(dictionary))
    file_vector.append(dropped_calls(dictionary))
    return file_vector


def input_vector(folder):
    full_input = []
    for file in os.scandir(folder):
            full_input.append(vector_file(file))
    return full_input

folder = r"C:/Users/T pro/Desktop/jsons"
all_input = input_vector(folder)

end = time.time()

print("It took: {0} s, compared to {1}".format(end - start, dif1))
print("The whole bunch would take: {0} hours, compared to {1} hours".format((end - start) * (100/len(all_input)) / 3600, dif1 * 10000/3600))

